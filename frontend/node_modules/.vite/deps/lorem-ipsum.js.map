{
  "version": 3,
  "sources": ["../../lorem-ipsum/src/constants/formats.ts", "../../lorem-ipsum/src/constants/units.ts", "../../lorem-ipsum/src/constants/words.ts", "../../lorem-ipsum/src/constants/lineEndings.ts", "../../lorem-ipsum/src/util/capitalize.ts", "../../lorem-ipsum/src/util/isNode.ts", "../../lorem-ipsum/src/util/isReactNative.ts", "../../lorem-ipsum/src/constants/platforms.ts", "../../lorem-ipsum/src/util/isWindows.ts", "../../lorem-ipsum/src/util/makeArrayOfLength.ts", "../../lorem-ipsum/src/util/makeArrayOfStrings.ts", "../../lorem-ipsum/src/util/index.ts", "../../lorem-ipsum/src/lib/generator.ts", "../../lorem-ipsum/src/lib/LoremIpsum.ts", "../../lorem-ipsum/src/index.ts"],
  "sourcesContent": ["export const FORMAT_HTML = \"html\";\r\nexport const FORMAT_PLAIN = \"plain\";\r\nexport const FORMATS = [FORMAT_HTML, FORMAT_PLAIN];\r\nexport type LoremFormat = \"plain\" | \"html\";\r\n", "export const UNIT_WORDS = \"words\";\nexport const UNIT_WORD = \"word\";\nexport const UNIT_SENTENCES = \"sentences\";\nexport const UNIT_SENTENCE = \"sentence\";\nexport const UNIT_PARAGRAPHS = \"paragraphs\";\nexport const UNIT_PARAGRAPH = \"paragraph\";\nexport const UNITS = [\n  UNIT_WORDS,\n  UNIT_WORD,\n  UNIT_SENTENCES,\n  UNIT_SENTENCE,\n  UNIT_PARAGRAPHS,\n  UNIT_PARAGRAPH,\n];\nexport type LoremUnit = \"words\" | \"word\" | \"sentences\" | \"sentence\" | \"paragraphs\" | \"paragraph\";\n", "export const WORDS = [\r\n  \"ad\",\r\n  \"adipisicing\",\r\n  \"aliqua\",\r\n  \"aliquip\",\r\n  \"amet\",\r\n  \"anim\",\r\n  \"aute\",\r\n  \"cillum\",\r\n  \"commodo\",\r\n  \"consectetur\",\r\n  \"consequat\",\r\n  \"culpa\",\r\n  \"cupidatat\",\r\n  \"deserunt\",\r\n  \"do\",\r\n  \"dolor\",\r\n  \"dolore\",\r\n  \"duis\",\r\n  \"ea\",\r\n  \"eiusmod\",\r\n  \"elit\",\r\n  \"enim\",\r\n  \"esse\",\r\n  \"est\",\r\n  \"et\",\r\n  \"eu\",\r\n  \"ex\",\r\n  \"excepteur\",\r\n  \"exercitation\",\r\n  \"fugiat\",\r\n  \"id\",\r\n  \"in\",\r\n  \"incididunt\",\r\n  \"ipsum\",\r\n  \"irure\",\r\n  \"labore\",\r\n  \"laboris\",\r\n  \"laborum\",\r\n  \"Lorem\",\r\n  \"magna\",\r\n  \"minim\",\r\n  \"mollit\",\r\n  \"nisi\",\r\n  \"non\",\r\n  \"nostrud\",\r\n  \"nulla\",\r\n  \"occaecat\",\r\n  \"officia\",\r\n  \"pariatur\",\r\n  \"proident\",\r\n  \"qui\",\r\n  \"quis\",\r\n  \"reprehenderit\",\r\n  \"sint\",\r\n  \"sit\",\r\n  \"sunt\",\r\n  \"tempor\",\r\n  \"ullamco\",\r\n  \"ut\",\r\n  \"velit\",\r\n  \"veniam\",\r\n  \"voluptate\",\r\n];\r\n", "export const LINE_ENDINGS = {\r\n  POSIX: \"\\n\",\r\n  WIN32: \"\\r\\n\",\r\n};\r\n", "/**\r\n * @param str  A string that may or may not be capitalized.\r\n * @returns    A capitalized string.\r\n */\r\nconst capitalize = (str: string): string => {\r\n  const trimmed = str.trim();\r\n  return trimmed.charAt(0).toUpperCase() + trimmed.slice(1);\r\n};\r\n\r\nexport default capitalize;\r\n", "/**\r\n * @returns  True if the runtime is NodeJS.\r\n */\r\nconst isNode = (): boolean => {\r\n  return typeof module !== \"undefined\" && !!module.exports;\r\n};\r\n\r\nexport default isNode;\r\n", "/**\r\n * Check if runtime is ReactNative.\r\n * Solution based on https://github.com/knicklabs/lorem-ipsum.js/pull/52/files\r\n *\r\n * @returns  True if runtime is ReactNative.\r\n */\r\nconst isReactNative = (): boolean => {\r\n  let isReactNativeResult: boolean = false;\r\n\r\n  try {\r\n    isReactNativeResult = navigator.product === \"ReactNative\";\r\n  } catch (e) {\r\n    isReactNativeResult = false;\r\n  }\r\n\r\n  return isReactNativeResult;\r\n};\r\n\r\nexport default isReactNative;\r\n", "export const SUPPORTED_PLATFORMS = {\r\n  DARWIN: \"darwin\",\r\n  LINUX: \"linux\",\r\n  WIN32: \"win32\",\r\n};\r\n", "import { SUPPORTED_PLATFORMS } from \"../constants/platforms\";\r\n\r\n/**\r\n * @returns True if process is windows.\r\n */\r\nconst isWindows = (): boolean => {\r\n  let isWindowsResult: boolean = false;\r\n  try {\r\n    isWindowsResult = process.platform === SUPPORTED_PLATFORMS.WIN32;\r\n  } catch (e) {\r\n    isWindowsResult = false;\r\n  }\r\n  return isWindowsResult;\r\n};\r\n\r\nexport default isWindows;\r\n", "/**\r\n * @param length Length \"x\".\r\n * @returns      An array of indexes of length \"x\".\r\n */\r\nconst makeArrayOfLength = (length: number = 0): number[] => {\r\n  return Array.apply(null, Array(length)).map(\r\n    (item: any, index: number): number => index,\r\n  );\r\n};\r\n\r\nexport default makeArrayOfLength;\r\n", "import makeArrayOfLength from \"./makeArrayOfLength\";\r\n/**\r\n * @param length  Length \"x\".\r\n * @returns       An array of strings of length \"x\".\r\n */\r\nconst makeArrayOfStrings = (\r\n  length: number,\r\n  makeString: () => string,\r\n): string[] => {\r\n  const arr = makeArrayOfLength(length);\r\n  return arr.map(() => makeString());\r\n};\r\n\r\nexport default makeArrayOfStrings;\r\n", "import capitalize from \"./capitalize\";\r\nimport isNode from \"./isNode\";\r\nimport isReactNative from \"./isReactNative\";\r\nimport isWindows from \"./isWindows\";\r\nimport makeArrayOfLength from \"./makeArrayOfLength\";\r\nimport makeArrayOfStrings from \"./makeArrayOfStrings\";\r\n\r\nexport {\r\n  capitalize,\r\n  isNode,\r\n  isReactNative,\r\n  isWindows,\r\n  makeArrayOfLength,\r\n  makeArrayOfStrings,\r\n};\r\n", "import { WORDS } from \"../constants/words\";\r\nimport { capitalize, makeArrayOfLength } from \"../util\";\r\n\r\nexport interface IBounds {\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\nexport type IPrng = () => number;\r\n\r\nexport type ISeedRandom = new (seed?: string) => IPrng;\r\n\r\nexport interface IMath {\r\n  seedrandom: ISeedRandom;\r\n}\r\n\r\nexport interface IGeneratorOptions {\r\n  sentencesPerParagraph?: IBounds;\r\n  wordsPerSentence?: IBounds;\r\n  random?: IPrng;\r\n  seed?: string;\r\n  words?: string[];\r\n}\r\n\r\nclass Generator {\r\n  public sentencesPerParagraph: IBounds;\r\n  public wordsPerSentence: IBounds;\r\n  public random: IPrng;\r\n  public words: string[];\r\n\r\n  constructor({\r\n    sentencesPerParagraph = { max: 7, min: 3 },\r\n    wordsPerSentence = { max: 15, min: 5 },\r\n    random,\r\n    seed,\r\n    words = WORDS,\r\n  }: IGeneratorOptions = {}) {\r\n    if (sentencesPerParagraph.min > sentencesPerParagraph.max) {\r\n      throw new Error(\r\n        `Minimum number of sentences per paragraph (${\r\n          sentencesPerParagraph.min\r\n        }) cannot exceed maximum (${sentencesPerParagraph.max}).`,\r\n      );\r\n    }\r\n\r\n    if (wordsPerSentence.min > wordsPerSentence.max) {\r\n      throw new Error(\r\n        `Minimum number of words per sentence (${\r\n          wordsPerSentence.min\r\n        }) cannot exceed maximum (${wordsPerSentence.max}).`,\r\n      );\r\n    }\r\n\r\n    this.sentencesPerParagraph = sentencesPerParagraph;\r\n    this.words = words;\r\n    this.wordsPerSentence = wordsPerSentence;\r\n    this.random = random || Math.random;\r\n  }\r\n\r\n  public generateRandomInteger(min: number, max: number): number {\r\n    return Math.floor(this.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  public generateRandomWords(num?: number): string {\r\n    const { min, max } = this.wordsPerSentence;\r\n    const length = num || this.generateRandomInteger(min, max);\r\n    return makeArrayOfLength(length)\r\n      .reduce((accumulator: string, index: number): string => {\r\n        return `${this.pluckRandomWord()} ${accumulator}`;\r\n      }, \"\")\r\n      .trim();\r\n  }\r\n\r\n  public generateRandomSentence(num?: number): string {\r\n    return `${capitalize(this.generateRandomWords(num))}.`;\r\n  }\r\n\r\n  public generateRandomParagraph(num?: number): string {\r\n    const { min, max } = this.sentencesPerParagraph;\r\n    const length = num || this.generateRandomInteger(min, max);\r\n    return makeArrayOfLength(length)\r\n      .reduce((accumulator: string, index: number): string => {\r\n        return `${this.generateRandomSentence()} ${accumulator}`;\r\n      }, \"\")\r\n      .trim();\r\n  }\r\n\r\n  public pluckRandomWord(): string {\r\n    const min = 0;\r\n    const max = this.words.length - 1;\r\n    const index = this.generateRandomInteger(min, max);\r\n    return this.words[index];\r\n  }\r\n}\r\n\r\nexport default Generator;\r\n", "import { FORMAT_HTML, FORMAT_PLAIN, FORMATS, LoremFormat } from \"../constants/formats\";\r\nimport { LINE_ENDINGS } from \"../constants/lineEndings\";\r\nimport Generator, { IGeneratorOptions } from \"../lib/generator\";\r\nimport { isNode, isReactNative, isWindows, makeArrayOfStrings } from \"../util\";\r\n\r\nclass LoremIpsum {\r\n  public generator: Generator;\r\n\r\n  constructor(\r\n    options: IGeneratorOptions = {},\r\n    public format: LoremFormat = FORMAT_PLAIN,\r\n    public suffix?: string,\r\n  ) {\r\n    if (FORMATS.indexOf(format.toLowerCase()) === -1) {\r\n      throw new Error(\r\n        `${format} is an invalid format. Please use ${FORMATS.join(\" or \")}.`,\r\n      );\r\n    }\r\n    this.generator = new Generator(options);\r\n  }\r\n\r\n  public getLineEnding() {\r\n    if (this.suffix) {\r\n      return this.suffix;\r\n    }\r\n\r\n    if (!isReactNative() && isNode() && isWindows()) {\r\n      return LINE_ENDINGS.WIN32;\r\n    }\r\n\r\n    return LINE_ENDINGS.POSIX;\r\n  }\r\n\r\n  public formatString(str: string): string {\r\n    if (this.format === FORMAT_HTML) {\r\n      return `<p>${str}</p>`;\r\n    }\r\n    return str;\r\n  }\r\n\r\n  public formatStrings(strings: string[]): string[] {\r\n    return strings.map((str) => this.formatString(str));\r\n  }\r\n\r\n  public generateWords(num?: number): string {\r\n    return this.formatString(this.generator.generateRandomWords(num));\r\n  }\r\n\r\n  public generateSentences(num?: number): string {\r\n    return this.formatString(this.generator.generateRandomParagraph(num));\r\n  }\r\n\r\n  public generateParagraphs(num: number): string {\r\n    const makeString = this.generator.generateRandomParagraph.bind(\r\n      this.generator,\r\n    );\r\n    return this.formatStrings(makeArrayOfStrings(num, makeString)).join(\r\n      this.getLineEnding(),\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoremIpsum;\r\n", "import { LoremFormat, FORMAT_PLAIN } from \"./constants/formats\";\r\nimport {\r\n  LoremUnit,\r\n  UNIT_PARAGRAPH,\r\n  UNIT_PARAGRAPHS,\r\n  UNIT_SENTENCES,\r\n  UNIT_SENTENCE,\r\n  UNIT_WORDS,\r\n  UNIT_WORD,\r\n} from \"./constants/units\";\r\nimport { WORDS } from \"./constants/words\";\r\nimport { IPrng } from \"./lib/generator\";\r\nimport LoremIpsum from \"./lib/LoremIpsum\";\r\n\r\nexport interface ILoremIpsumParams {\r\n  count?: number;\r\n  format?: LoremFormat;\r\n  paragraphLowerBound?: number;\r\n  paragraphUpperBound?: number;\r\n  random?: IPrng;\r\n  sentenceLowerBound?: number;\r\n  sentenceUpperBound?: number;\r\n  units?: LoremUnit;\r\n  words?: string[];\r\n  suffix?: string;\r\n}\r\n\r\nconst loremIpsum = ({\r\n  count = 1,\r\n  format = FORMAT_PLAIN,\r\n  paragraphLowerBound = 3,\r\n  paragraphUpperBound = 7,\r\n  random,\r\n  sentenceLowerBound = 5,\r\n  sentenceUpperBound = 15,\r\n  units = UNIT_SENTENCES,\r\n  words = WORDS,\r\n  suffix = \"\",\r\n}: ILoremIpsumParams = {}): string => {\r\n  const options = {\r\n    random,\r\n    sentencesPerParagraph: {\r\n      max: paragraphUpperBound,\r\n      min: paragraphLowerBound,\r\n    },\r\n    words,\r\n    wordsPerSentence: {\r\n      max: sentenceUpperBound,\r\n      min: sentenceLowerBound,\r\n    },\r\n  };\r\n\r\n  const lorem: LoremIpsum = new LoremIpsum(options, format, suffix);\r\n\r\n  switch (units) {\r\n    case UNIT_PARAGRAPHS:\r\n    case UNIT_PARAGRAPH:\r\n      return lorem.generateParagraphs(count);\r\n    case UNIT_SENTENCES:\r\n    case UNIT_SENTENCE:\r\n      return lorem.generateSentences(count);\r\n    case UNIT_WORDS:\r\n    case UNIT_WORD:\r\n      return lorem.generateWords(count);\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport { loremIpsum, LoremIpsum };\r\n"],
  "mappings": "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",
  "names": ["FORMAT_HTML", "FORMAT_PLAIN", "FORMATS", "UNIT_WORDS", "UNIT_WORD", "UNIT_SENTENCES", "UNIT_SENTENCE", "UNIT_PARAGRAPHS", "UNIT_PARAGRAPH", "UNITS", "WORDS", "LINE_ENDINGS", "POSIX", "WIN32", "capitalize", "str", "trimmed", "trim", "charAt", "toUpperCase", "slice", "isNode", "module", "exports", "isReactNative", "isReactNativeResult", "navigator", "product", "e", "SUPPORTED_PLATFORMS", "DARWIN", "LINUX", "WIN32", "isWindows", "isWindowsResult", "process", "platform", "SUPPORTED_PLATFORMS", "WIN32", "e", "makeArrayOfLength", "length", "Array", "apply", "map", "item", "index", "makeArrayOfStrings", "length", "makeString", "arr", "makeArrayOfLength", "map", "Generator", "sentencesPerParagraph", "max", "min", "wordsPerSentence", "random", "seed", "words", "WORDS", "Error", "Math", "floor", "num", "length", "generateRandomInteger", "makeArrayOfLength", "reduce", "accumulator", "index", "pluckRandomWord", "trim", "capitalize", "generateRandomWords", "generateRandomSentence", "LoremIpsum", "options", "format", "FORMAT_PLAIN", "suffix", "FORMATS", "indexOf", "toLowerCase", "Error", "join", "generator", "Generator", "isReactNative", "isNode", "isWindows", "LINE_ENDINGS", "WIN32", "POSIX", "str", "FORMAT_HTML", "strings", "map", "formatString", "num", "generateRandomWords", "generateRandomParagraph", "makeString", "bind", "formatStrings", "makeArrayOfStrings", "getLineEnding", "loremIpsum", "count", "format", "FORMAT_PLAIN", "paragraphLowerBound", "paragraphUpperBound", "random", "sentenceLowerBound", "sentenceUpperBound", "units", "UNIT_SENTENCES", "words", "WORDS", "suffix", "options", "sentencesPerParagraph", "max", "min", "wordsPerSentence", "lorem", "LoremIpsum", "UNIT_PARAGRAPHS", "UNIT_PARAGRAPH", "generateParagraphs", "UNIT_SENTENCE", "generateSentences", "UNIT_WORDS", "UNIT_WORD", "generateWords"]
}
